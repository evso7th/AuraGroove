–ì–ª—É–±–æ–∫–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞: "Iron Man" + Mike Oldfield = –ì–∏–ø–Ω–æ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤
üéØ –ö–æ–Ω—Ü–µ–ø—Ü–∏—è —Å—Ç–∏–ª—è:
–¢—è–∂–µ–ª—ã–π —Ä–∏—Ñ—Ñ Iron Man + –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã Mike Oldfield = –ì–∏–ø–Ω–æ—Ç–∏—á–µ—Å–∫–∏–π —Ç—Ä–∞–Ω—Å —Å —ç–≤–æ–ª—é—Ü–∏–µ–π

–¢–µ–º–ø: 60 BPM (–ª—É—á—à–µ –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –≥–∏–ø–Ω–æ–∑–∞)
60 BPM = 1 —É–¥–∞—Ä –≤ —Å–µ–∫—É–Ω–¥—É = –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∞
70 BPM = —Å–ª–∏—à–∫–æ–º –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è –≥–∏–ø–Ω–æ–∑–∞
üéµ –ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:
–û—Å–Ω–æ–≤–∞:


1
2
3
Tempo: 60 BPM
Time Signature: 4/4
Key: E minor (–∫–∞–∫ –≤ Iron Man)
–°–µ–∫—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (12 –º–∏–Ω—É—Ç):


1
2
3
4
5
6
[0:00-2:00]   –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ (—á–∏—Å—Ç—ã–π Iron Man —Ä–∏—Ñ—Ñ)
[2:00-4:00]   –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä)
[4:00-6:00]   –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å (Oldfield –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–∏)
[6:00-8:00]   –¢—Ä–µ—Ç–∏–π —É—Ä–æ–≤–µ–Ω—å (–ø–æ–ª–∏—Ñ–æ–Ω–∏—è)
[8:00-10:00]  –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å)
[10:00-12:00] –†–∞–∑–≤—è–∑–∫–∞ (–≤–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å—Ç–æ—Ç–µ)
üé∏ 1. Iron Man —Ä–∏—Ñ—Ñ (–æ—Å–Ω–æ–≤–∞)
–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ä–∏—Ñ—Ñ:
js


1
2
3
4
5
6
7
‚åÑ
// 4 —Ç–∞–∫—Ç–∞, –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
const ironManRiff = [
  { note: 'E1', time: 0, duration: '2n', velocity: 0.9 },
  { note: 'E1', time: 2, duration: '2n', velocity: 0.9 },
  { note: 'E1', time: 4, duration: '1n', velocity: 0.9 },
  { note: 'G1', time: 6, duration: '2n', velocity: 0.8 }
];
–≠–≤–æ–ª—é—Ü–∏—è —Ä–∏—Ñ—Ñ–∞:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
// –£—Ä–æ–≤–µ–Ω—å 1: –ß–∏—Å—Ç—ã–π —Ä–∏—Ñ—Ñ
// –£—Ä–æ–≤–µ–Ω—å 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–∫—Ç–∞–≤
// –£—Ä–æ–≤–µ–Ω—å 3: –ê—Ä–ø–µ–¥–∂–∏–æ —ç–ª–µ–º–µ–Ω—Ç—ã
// –£—Ä–æ–≤–µ–Ω—å 4: –ü–æ–ª–∏—Ä–∏—Ç–º–∏—è

class RiffEvolver {
  evolveRiff(level) {
    switch(level) {
      case 1:
        return this.basicRiff();
      case 2:
        return this.addOctaves();
      case 3:
        return this.addArpeggios();
      case 4:
        return this.addPolyrhythms();
    }
  }
  
  addOctaves() {
    return [
      { note: ['E1', 'E2'], time: 0, duration: '2n', velocity: 0.9 },
      { note: ['E1', 'E2'], time: 2, duration: '2n', velocity: 0.9 },
      // ...
    ];
  }
}
üåÄ 2. Mike Oldfield —Ç–µ–∫—Å—Ç—É—Ä—ã
–•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:
–°–ø–∏—Ä–∞–ª—å–Ω—ã–µ –º–µ–ª–æ–¥–∏–∏
–ù–∞–ª–æ–∂–µ–Ω–Ω—ã–µ —Ä–∏—Ç–º—ã
–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ
–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
–°–ø–∏—Ä–∞–ª—å–Ω–∞—è –º–µ–ª–æ–¥–∏—è:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
class SpiralMelodyGenerator {
  generateSpiral(scale = 'E minor', octaves = 3, speed = '8n') {
    const notes = this.generateScale(scale, octaves);
    const spiral = [];
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Ä–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for (let i = 0; i < notes.length * 2; i++) {
      const index = i % notes.length;
      const octaveOffset = Math.floor(i / notes.length) * 12;
      
      spiral.push({
        note: notes[index] + octaveOffset,
        time: i * Tone.Time(speed).toSeconds(),
        duration: speed,
        velocity: 0.6 + (i / notes.length) * 0.2
      });
    }
    
    return spiral;
  }
  
  generateScale(scaleName, octaves) {
    // E minor: E, F#, G, A, B, C, D
    const intervals = [0, 2, 3, 5, 7, 8, 10];
    const notes = [];
    
    for (let octave = 0; octave < octaves; octave++) {
      intervals.forEach(interval => {
        notes.push(interval + (octave * 12));
      });
    }
    
    return notes;
  }
}
üéõÔ∏è 3. –ó–≤—É–∫–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ "Iron Man + Oldfield"
–û—Å–Ω–æ–≤–Ω—ã–µ —Å–ª–æ–∏:
A) –¢—è–∂–µ–ª—ã–π –±–∞—Å (Iron Man):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
‚åÑ
‚åÑ
‚åÑ
‚åÑ
const PRESET_HEAVY_BASS = {
  synth: {
    oscillator: { type: 'sine' },
    envelope: { 
      attack: 0.05,
      decay: 0.3,
      sustain: 0.9,
      release: 1.5
    }
  },
  effects: [
    { type: 'distortion', amount: 0.1 },
    { type: 'filter', frequency: 120, type: 'lowpass' }
  ],
  color: '#8B0000' // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
};
B) –°–ø–∏—Ä–∞–ª—å–Ω—ã–µ –≥–∏—Ç–∞—Ä—ã (Oldfield):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
const PRESET_SPIRAL_GUITAR = {
  synth: {
    type: 'poly',
    voices: 4,
    settings: {
      oscillator: { type: 'sawtooth' },
      envelope: {
        attack: 0.01,
        decay: 0.5,
        sustain: 0.7,
        release: 1.0
      }
    }
  },
  effects: [
    { type: 'chorus', frequency: 0.3, depth: 0.4 },
    { type: 'delay', delayTime: '8n', feedback: 0.3 },
    { type: 'reverb', decay: 4, wet: 0.3 }
  ],
  color: '#4169E1' // –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–∏–Ω–∏–π
};
C) –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –ø—ç–¥—ã:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
const PRESET_ATMOSPHERIC_PAD = {
  synth: {
    type: 'fm',
    voices: 3,
    settings: {
      harmonicity: 3,
      modulationIndex: 8,
      envelope: {
        attack: 2.0,
        decay: 1.5,
        sustain: 0.4,
        release: 3.0
      }
    }
  },
  effects: [
    { type: 'filter', frequency: 400, type: 'lowpass' },
    { type: 'panner', frequency: 0.02, depth: 0.3 },
    { type: 'reverb', decay: 8, wet: 0.5 }
  ],
  color: '#9370DB' // –°—Ä–µ–¥–Ω–∏–π –ø—É—Ä–ø—É—Ä–Ω—ã–π
};
D) –ü–µ—Ä–∫—É—Å—Å–∏—è Oldfield:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
‚åÑ
‚åÑ
‚åÑ
const PRESET_OLDFIELD_PERCUSSION = {
  samples: {
    'C3': 'hand_drum.mp3',
    'D3': 'bongo.mp3',
    'E3': 'shaker.mp3',
    'F3': 'tambourine.mp3'
  },
  effects: [
    { type: 'filter', frequency: 1000, type: 'bandpass' },
    { type: 'delay', delayTime: '16n', feedback: 0.2 }
  ],
  color: '#FFD700' // –ó–æ–ª–æ—Ç–æ–π
};
üåä 4. –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è (crescendo system)
–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
class MultiLevelCrescendo {
  constructor() {
    this.levels = {
      bass: { start: 0.3, end: 1.0, rate: 0.001 },
      melody: { start: 0.0, end: 0.8, rate: 0.002 },
      harmony: { start: 0.0, end: 0.6, rate: 0.0015 },
      percussion: { start: 0.0, end: 0.7, rate: 0.003 }
    };
    
    this.currentLevels = {
      bass: 0.3,
      melody: 0.0,
      harmony: 0.0,
      percussion: 0.0
    };
  }
  
  evolve(timeElapsed) {
    Object.keys(this.levels).forEach(layer => {
      const config = this.levels[layer];
      const progress = Math.min(1, timeElapsed / 600); // 10 –º–∏–Ω—É—Ç –¥–æ –º–∞–∫—Å–∏–º—É–º–∞
      
      this.currentLevels[layer] = this.morph(
        config.start, 
        config.end, 
        progress
      );
    });
    
    return this.currentLevels;
  }
  
  morph(start, end, progress) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∫—Ä–∏–≤—É—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏—è
    return start + (end - start) * Math.pow(progress, 1.5);
  }
}
üéØ 5. –ì–∏–ø–Ω–æ—Ç–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
–§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (–ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É "Tubular Bells"):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
class FractalStructure {
  constructor() {
    this.sections = [
      { name: 'themeA', duration: 120 }, // 2 –º–∏–Ω—É—Ç—ã
      { name: 'themeB', duration: 120 },
      { name: 'development', duration: 240 },
      { name: 'climax', duration: 120 },
      { name: 'return', duration: 120 }
    ];
    
    this.themeA = {
      instruments: ['bass', 'simple_melody'],
      complexity: 0.2
    };
    
    this.themeB = {
      instruments: ['bass', 'spiral_melody', 'light_percussion'],
      complexity: 0.4
    };
    
    this.development = {
      instruments: ['bass', 'spiral_melody', 'harmony_pad', 'percussion'],
      complexity: 0.7
    };
    
    this.climax = {
      instruments: ['bass', 'spiral_melody', 'harmony_pad', 'percussion', 'accent_synths'],
      complexity: 1.0
    };
    
    this.return = {
      instruments: ['bass', 'simple_melody'],
      complexity: 0.3
    };
  }
  
  getCurrentSection(time) {
    let accumulatedTime = 0;
    for (let section of this.sections) {
      if (time < accumulatedTime + section.duration) {
        return section;
      }
      accumulatedTime += section.duration;
    }
    return this.sections[0]; // –¶–∏–∫–ª
  }
}
üß† 6. –¢—Ä–∞–Ω—Å–æ–≤–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è
–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≥–∏–ø–Ω–æ–∑–∞:
A) –ò–∑–æ—Ö—Ä–æ–Ω–Ω—ã–π —Ä–∏—Ç–º:
js


1
2
3
4
5
6
‚åÑ
// –¢–æ—á–Ω—ã–π 60 BPM –ø—É–ª—å—Å
const pulseGenerator = {
  frequency: 1, // 1 –ì—Ü = 60 BPM
  waveform: 'sine',
  volume: -20 // –û—á–µ–Ω—å —Ç–∏—Ö–æ, –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ
};
B) –ë–∏–Ω–∞—É—Ä–∞–ª—å–Ω—ã–µ –±–∏–µ–Ω–∏—è:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
‚åÑ
‚åÑ
‚åÑ
class BinauralBeats {
  constructor() {
    this.leftFreq = 200;   // –õ–µ–≤–æ–µ —É—Ö–æ
    this.rightFreq = 204;  // –ü—Ä–∞–≤–æ–µ —É—Ö–æ (4 Hz = —Ç–µ—Ç–∞-—Ä–∏—Ç–º)
  }
  
  // –¢–µ—Ç–∞-—Ä–∏—Ç–º (4-8 Hz) –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è
  // –ê–ª—å—Ñ–∞-—Ä–∏—Ç–º (8-12 Hz) –¥–ª—è —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è
  // –ë–µ—Ç–∞-—Ä–∏—Ç–º (12-30 Hz) –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏
  
  evolveForMeditation(progress) {
    // –ü–µ—Ä–µ—Ö–æ–¥ –æ—Ç –±–µ—Ç–∞ –∫ —Ç–µ—Ç–∞
    const targetFreq = 30 - (progress * 26); // 30 ‚Üí 4 Hz
    this.rightFreq = this.leftFreq + targetFreq;
  }
}
üéµ 7. –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
class ProgressiveEvolution {
  constructor() {
    this.evolutionStages = [
      {
        name: 'grounding',
        time: [0, 120],
        elements: ['bass', 'basic_pulse'],
        complexity: 0.1
      },
      {
        name: 'entrainment',
        time: [120, 240],
        elements: ['bass', 'simple_melody', 'light_percussion'],
        complexity: 0.3
      },
      {
        name: 'journey',
        time: [240, 480],
        elements: ['bass', 'spiral_melody', 'harmony_pad', 'percussion'],
        complexity: 0.6
      },
      {
        name: 'transcendence',
        time: [480, 600],
        elements: ['bass', 'spiral_melody', 'harmony_pad', 'percussion', 'effects'],
        complexity: 0.9
      },
      {
        name: 'return',
        time: [600, 720],
        elements: ['bass', 'simple_melody'],
        complexity: 0.2
      }
    ];
  }
  
  getActiveElements(currentTime) {
    const stage = this.evolutionStages.find(s => 
      currentTime >= s.time[0] && currentTime < s.time[1]
    );
    
    return stage ? stage.elements : ['bass'];
  }
  
  getComplexity(currentTime) {
    const stage = this.evolutionStages.find(s => 
      currentTime >= s.time[0] && currentTime < s.time[1]
    );
    
    return stage ? stage.complexity : 0.1;
  }
}
üé® –¶–≤–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –≥–∏–ø–Ω–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–∏–ª—è:


1
2
3
4
5
üü• –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π (#8B0000)    - –¢—è–∂–µ–ª—ã–π –±–∞—Å (Iron Man)
üîµ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π —Å–∏–Ω–∏–π (#4169E1) - –°–ø–∏—Ä–∞–ª—å–Ω—ã–µ –º–µ–ª–æ–¥–∏–∏
üü£ –°—Ä–µ–¥–Ω–∏–π –ø—É—Ä–ø—É—Ä–Ω—ã–π (#9370DB) - –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–µ –ø—ç–¥—ã
ü•á –ó–æ–ª–æ—Ç–æ–π (#FFD700)          - –ü–µ—Ä–∫—É—Å—Å–∏—è
üåå –ì–ª—É–±–æ–∫–∏–π —á–µ—Ä–Ω—ã–π (#000000)   - –ü–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–∏–ø–Ω–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞:
–¢–µ–º–ø 60 BPM - –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—É–ª—å—Å –¥–ª—è —Ç—Ä–∞–Ω—Å–∞
–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ - –Ω–µ –±–æ–ª–µ–µ 0.1 —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç—É
–ë–∏–Ω–∞—É—Ä–∞–ª—å–Ω—ã–µ –±–∏–µ–Ω–∏—è - –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç –∞–ª—å—Ñ–∞ –∫ —Ç–µ—Ç–∞
–ò–∑–æ—Ö—Ä–æ–Ω–Ω—ã–π —Ä–∏—Ç–º - –ø–æ–¥—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–π –ø—É–ª—å—Å
–§—Ä–∞–∫—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ - —Å–∞–º–æ–ø–æ–¥–æ–±–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
–ú–∏–Ω–∏–º—É–º —Ä–µ–∑–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ - –≤—Å–µ –ø–ª–∞–≤–Ω–æ

