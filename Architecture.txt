–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É —Å Web Workers –∏ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞.

üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å–∏—Å—Ç–µ–º—ã


1
2
3
4
5
6
7
8
9
[Main Thread]
‚îú‚îÄ‚îÄ Tone.js Audio Engine
‚îú‚îÄ‚îÄ UI Components
‚îú‚îÄ‚îÄ Note Scheduler
‚îî‚îÄ‚îÄ Note Buffer (4 bars ahead)
     ‚Üë
[Style Workers] (jazz-worker.js, rock-worker.js, etc.)
     ‚Üì
[Generator Core] (shared logic)
üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤


1
2
3
4
5
6
7
8
9
10
11
12
13
14
/src/
‚îú‚îÄ‚îÄ main/
‚îÇ   ‚îú‚îÄ‚îÄ index.js          // –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
‚îÇ   ‚îú‚îÄ‚îÄ audio-engine.js   // Tone.js —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
‚îÇ   ‚îú‚îÄ‚îÄ scheduler.js      // –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–æ—Ç
‚îÇ   ‚îî‚îÄ‚îÄ buffer-manager.js // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–æ–º
‚îú‚îÄ‚îÄ workers/
‚îÇ   ‚îú‚îÄ‚îÄ base-worker.js    // –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è worker'–æ–≤
‚îÇ   ‚îú‚îÄ‚îÄ jazz-worker.js    // –î–∂–∞–∑–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
‚îÇ   ‚îú‚îÄ‚îÄ rock-worker.js    // –†–æ–∫–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
‚îÇ   ‚îî‚îÄ‚îÄ generators/       // –û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚îÇ       ‚îú‚îÄ‚îÄ harmony.js
‚îÇ       ‚îú‚îÄ‚îÄ melody.js
‚îÇ       ‚îî‚îÄ‚îÄ rhythm.js
üéµ 1. Main Thread (index.js)
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
import { AudioEngine } from './audio-engine.js';
import { BufferManager } from './buffer-manager.js';
import { Scheduler } from './scheduler.js';

class MusicAutomaton {
  constructor() {
    this.audioEngine = new AudioEngine();
    this.bufferManager = new BufferManager();
    this.scheduler = new Scheduler(this.audioEngine);
    
    this.currentStyle = 'jazz';
    this.isPlaying = false;
    
    this.initWorkers();
    this.startBuffering();
  }
  
  initWorkers() {
    this.workers = {
      jazz: new Worker('./workers/jazz-worker.js'),
      rock: new Worker('./workers/rock-worker.js'),
      pop: new Worker('./workers/pop-worker.js')
    };
    
    Object.entries(this.workers).forEach(([style, worker]) => {
      worker.onmessage = (e) => this.handleWorkerMessage(style, e.data);
    });
  }
  
  handleWorkerMessage(style, data) {
    if (data.type === 'notes-generated') {
      this.bufferManager.addSection(data.section);
    }
  }
  
  startBuffering() {
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º 4 —Ç–∞–∫—Ç–∞ –≤–ø–µ—Ä–µ–¥
    this.requestGeneration(4);
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –±—É—Ñ–µ—Ä
    setInterval(() => {
      if (this.bufferManager.needMoreSections()) {
        this.requestGeneration(2);
      }
    }, 500);
  }
  
  requestGeneration(bars) {
    const worker = this.workers[this.currentStyle];
    if (worker) {
      worker.postMessage({
        type: 'generate',
        bars: bars,
        requestId: Date.now(),
        tempo: this.audioEngine.getTempo()
      });
    }
  }
  
  start() {
    this.isPlaying = true;
    this.audioEngine.start();
    this.scheduler.start();
  }
  
  stop() {
    this.isPlaying = false;
    this.audioEngine.stop();
    this.scheduler.stop();
  }
}

// –ó–∞–ø—É—Å–∫
const app = new MusicAutomaton();
üéº 2. Buffer Manager (buffer-manager.js)
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
export class BufferManager {
  constructor() {
    this.sections = []; // [{ startTime, endTime, parts }]
    this.maxBufferTime = 16; // 4 —Ç–∞–∫—Ç–∞ –≤–ø–µ—Ä–µ–¥
    this.minBufferTime = 4;  // –ú–∏–Ω–∏–º—É–º 1 —Ç–∞–∫—Ç
  }
  
  addSection(section) {
    this.sections.push(section);
    this.sortSections();
    this.cleanupOldSections();
  }
  
  getNextSection(currentTime) {
    const next = this.sections.find(section => 
      section.startTime > currentTime
    );
    return next || null;
  }
  
  getSectionsInRange(startTime, endTime) {
    return this.sections.filter(section => 
      section.startTime < endTime && section.endTime > startTime
    );
  }
  
  needMoreSections(currentTime = 0) {
    const bufferEndTime = this.getBufferEndTime();
    const requiredEndTime = currentTime + this.maxBufferTime;
    return bufferEndTime < requiredEndTime;
  }
  
  getBufferEndTime() {
    if (this.sections.length === 0) return 0;
    return Math.max(...this.sections.map(s => s.endTime));
  }
  
  sortSections() {
    this.sections.sort((a, b) => a.startTime - b.startTime);
  }
  
  cleanupOldSections(currentTime = 0) {
    this.sections = this.sections.filter(section => 
      section.endTime > currentTime - 2 // –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –Ω–∞–∑–∞–¥
    );
  }
}
‚è∞ 3. Scheduler (scheduler.js)
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
import { Tone } from 'tone';

export class Scheduler {
  constructor(audioEngine) {
    this.audioEngine = audioEngine;
    this.isRunning = false;
    this.scheduledSections = new Set();
  }
  
  start() {
    this.isRunning = true;
    Tone.Transport.scheduleRepeat((time) => {
      this.scheduleUpcomingSections(time);
    }, "1m"); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —á–µ—Ç–≤–µ—Ä—Ç—å
    
    this.scheduleInitialSections();
  }
  
  scheduleUpcomingSections(currentTime) {
    const lookahead = 2; // –°–ª–µ–¥—É—é—â–∏–µ 2 —Ç–∞–∫—Ç–∞
    const sections = window.app.bufferManager.getSectionsInRange(
      currentTime, 
      currentTime + lookahead
    );
    
    sections.forEach(section => {
      if (!this.scheduledSections.has(section.id)) {
        this.scheduleSection(section);
        this.scheduledSections.add(section.id);
      }
    });
  }
  
  scheduleSection(section) {
    Object.entries(section.parts).forEach(([partName, notes]) => {
      notes.forEach(noteEvent => {
        const synth = this.audioEngine.getSynthForPart(partName);
        if (synth) {
          Tone.Transport.schedule((time) => {
            synth.triggerAttackRelease(
              noteEvent.note, 
              noteEvent.duration, 
              time,
              noteEvent.velocity
            );
          }, noteEvent.time);
        }
      });
    });
  }
  
  stop() {
    this.isRunning = false;
    this.scheduledSections.clear();
    Tone.Transport.cancel();
  }
}
üîä 4. Audio Engine (audio-engine.js)
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
import { Tone } from 'tone';

export class AudioEngine {
  constructor() {
    this.synths = {
      solo: new Tone.PolySynth(2, Tone.Synth).toDestination(),
      comp: new Tone.PolySynth(3, Tone.Sampler, {
        urls: { /* —Å—ç–º–ø–ª—ã */ },
        release: 0.3
      }).toDestination(),
      bass: new Tone.Synth().toDestination(),
      drums: new Tone.Sampler({
        urls: { /* —É–¥–∞—Ä–Ω—ã–µ */ }
      }).toDestination()
    };
    
    Tone.Transport.bpm.value = 120;
  }
  
  getSynthForPart(partName) {
    return this.synths[partName];
  }
  
  getTempo() {
    return Tone.Transport.bpm.value;
  }
  
  start() {
    Tone.start();
    Tone.Transport.start();
  }
  
  stop() {
    Tone.Transport.stop();
  }
}
üéµ 5. Worker (jazz-worker.js)
js


54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
importScripts('./generators/harmony.js');
      
      // –ê—Ä–ø–µ–¥–∂–∏–æ
      chordNotes.forEach((note, index) => {
        notes.push({
          note: note,
          time: barStart + (index * barDuration / chordNotes.length),
          duration: '8n',
          velocity: 0.7
        });
      });
    }
    return notes;
  }
  
  generateBass(bars, startTime, barDuration) {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞—Å–æ–≤–æ–π –ª–∏–Ω–∏–∏
    const notes = [];
    const chords = this.generateChordProgression(bars);
    
    for (let bar = 0; bar < bars; bar++) {
      const barStart = startTime + (bar * barDuration);
      const root = this.getChordRoot(chords[bar % chords.length]);
      
      // –ë–∞—Å –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∞–∫—Ç
      notes.push({
        note: root + '2', // –û–∫—Ç–∞–≤–∞ –±–∞—Å–∞
        time: barStart,
        duration: '1n',
        velocity: 0.8
      });
    }
    return notes;
  }
  
  getRandomJazzNote() {
    const notes = ['C4', 'D4', 'E4', 'F4', 'G4', 'A4', 'B4'];
    return notes[Math.floor(Math.random() * notes.length)];
  }
  
  generateChordProgression(bars) {
    return ['Cmaj7', 'A7', 'Dm7', 'G7'];
  }
  
  getChordNotes(chord) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
    const chords = {
      'Cmaj7': ['C4', 'E4', 'G4', 'B4'],
      'A7': ['A3', 'C#4', 'E4', 'G4'],
      'Dm7': ['D3', 'F3', 'A3', 'C4'],
      'G7': ['G3', 'B3', 'D4', 'F4']
    };
    return chords[chord] || chords['Cmaj7'];
  }
  
  getChordRoot(chord) {
    return chord.replace(/[^A-G]/g, '');
  }
}

const generator = new JazzGenerator();

self.onmessage = function(e) {
  const { type, bars, requestId, tempo } = e.data;
  
  if (type === 'generate') {
    try {
      const section = generator.generateSection(bars, tempo);
      
      self.postMessage({
        type: 'notes-generated',
        section: section,
        requestId: requestId
      });
    } catch (error) {
      self.postMessage({
        type: 'error',
        error: error.message,
        requestId: requestId
      });
    }
  }
};
üîÑ 6. –°–∏—Å—Ç–µ–º–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏
–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:
Main thread –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é 4 —Ç–∞–∫—Ç–æ–≤ –≤–ø–µ—Ä–µ–¥
Worker –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ
BufferManager —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–µ–∫—Ü–∏–∏, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏
Scheduler –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞
1 —Ç–∞–∫—Ç –¥–æ –Ω–∞—á–∞–ª–∞
–ö–æ–≥–¥–∞ —Å–µ–∫—Ü–∏—è –ø—Ä–æ–∏–≥—Ä–∞–Ω–∞ ‚Äî —É–¥–∞–ª—è–µ—Ç—Å—è –∏–∑ –±—É—Ñ–µ—Ä–∞
–ï—Å–ª–∏ –±—É—Ñ–µ—Ä –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
üìä –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —ç—Ç–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
–û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ —Å–≤–æ–±–æ–¥–µ–Ω
–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ
–ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ª–∞–≥–∏
‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞
–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å:
–õ–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏
–ö–∞–∂–¥—ã–π —Å—Ç–∏–ª—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω
–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
–•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É:

–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∏–ª–µ–π?
–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –¥–ª—è —Ä—É—á–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π?
–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–¥ —Å–ª–∞–±—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞?
–ö–∞–∫–æ–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥?

–ê –∫–∞–∫–∏–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å? –ø–æ–ª–∏—Ñ–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≥–æ–ª–æ—Å–æ–≤ –∏–ª–∏ –ø—É–ª—ã –º–æ–Ω–æ—Ñ–æ–Ω–∏—á–µ—Å–∫–∏—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞?

profile
Qwen3-Coder
–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.

üéØ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞–º:
–ú–∞–∫—Å–∏–º—É–º 10 –≥–æ–ª–æ—Å–æ–≤ –Ω–∞ –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
–ß–∏—Å—Ç—ã–π –∑–≤—É–∫ –±–µ–∑ —Ö—Ä–∏–ø–æ–≤
–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ –¥–ª—è —Ä—É—á–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
üîß –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–ª–∏—Ñ–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
js


1
2
3
4
5
6
7
8
9
‚åÑ
‚åÑ
const soloSynth = new Tone.PolySynth(2, Tone.Synth, {
  oscillator: { type: 'sine' },
  envelope: { attack: 0.01, decay: 0.1, sustain: 0.3, release: 0.2 }
}).toDestination();

const compSynth = new Tone.PolySynth(3, Tone.Sampler, {
  urls: { /* —Å—ç–º–ø–ª—ã */ },
  release: 0.3
}).toDestination();
‚úÖ –ü–ª—é—Å—ã:
–ü—Ä–æ—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞–º–∏
–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π voice stealing
‚ùå –ú–∏–Ω—É—Å—ã:
–ú–µ–Ω—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è –Ω–∞–¥ –∫–∞–∂–¥—ã–º –≥–æ–ª–æ—Å–æ–º
–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Latch-—Ä–µ–∂–∏–º
–û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤
üîß –í–∞—Ä–∏–∞–Ω—Ç 2: –ü—É–ª—ã –º–æ–Ω–æ—Ñ–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
class MonoSynthPool {
  constructor(size, synthClass, options = {}) {
    this.synths = Array(size).fill(null).map(() => 
      new synthClass(options).toDestination()
    );
    this.freeSynths = [...this.synths];
    this.activeNotes = new Map(); // note -> synth
  }
  
  play(note, duration = '8n', time = Tone.now(), velocity = 1) {
    if (this.freeSynths.length === 0) return null;
    
    const synth = this.freeSynths.pop();
    synth.triggerAttackRelease(note, duration, time, velocity);
    
    this.activeNotes.set(note, synth);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ
    const releaseTime = time + Tone.Time(duration).toSeconds();
    setTimeout(() => {
      this.release(note);
    }, (releaseTime - Tone.now()) * 1000);
    
    return synth;
  }
  
  release(note) {
    const synth = this.activeNotes.get(note);
    if (synth) {
      this.freeSynths.push(synth);
      this.activeNotes.delete(note);
    }
  }
  
  // –î–ª—è Latch-—Ä–µ–∂–∏–º–∞
  hold(note, time = Tone.now(), velocity = 1) {
    if (this.freeSynths.length === 0) return null;
    
    const synth = this.freeSynths.pop();
    synth.triggerAttack(note, time, velocity);
    this.activeNotes.set(note, synth);
    return synth;
  }
  
  releaseHold(note) {
    const synth = this.activeNotes.get(note);
    if (synth) {
      synth.triggerRelease();
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—É–ª —Å—Ä–∞–∑—É - –∂–¥–µ–º release
      synth.on('release', () => {
        this.freeSynths.push(synth);
        this.activeNotes.delete(note);
      });
    }
  }
}
üéµ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ (–ª—É—á—à–µ–µ –∏–∑ –¥–≤—É—Ö):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
// –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π - PolySynth
const autoSynths = {
  solo: new Tone.PolySynth(2, Tone.Synth, {
    oscillator: { type: 'triangle' },
    envelope: { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3 }
  }).toDestination(),
  
  comp: new Tone.PolySynth(3, Tone.Sampler, {
    urls: { C3: "piano_C3.mp3" },
    release: 0.4,
    baseUrl: "/samples/"
  }).toDestination(),
  
  bass: new Tone.Synth({
    oscillator: { type: 'sine' },
    envelope: { attack: 0.01, decay: 0.1, sustain: 0.8, release: 0.2 }
  }).toDestination()
};

// –î–ª—è —Ä—É—á–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π - MonoSynth Pools
const manualPools = {
  melodyPad: new MonoSynthPool(2, Tone.Synth, {
    oscillator: { type: 'sawtooth' },
    envelope: { attack: 0.01, decay: 0.1, sustain: 0.7, release: 0.3 }
  }),
  
  bassPad: new MonoSynthPool(2, Tone.Synth, {
    oscillator: { type: 'sine' },
    envelope: { attack: 0.01, decay: 0.05, sustain: 0.9, release: 0.2 }
  })
};
üéõÔ∏è –ü–æ—á–µ–º—É —Ç–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –æ–ø—Ç–∏–º–∞–ª–µ–Ω?
1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏ ‚Üí PolySynth
–ü—Ä–æ—â–µ –∫–æ–¥
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
–ù–µ –Ω—É–∂–µ–Ω Latch
2. –†—É—á–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ ‚Üí MonoSynth Pool
–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∫–∞–∂–¥—ã–º –≥–æ–ª–æ—Å–æ–º
Latch-—Ä–µ–∂–∏–º –≤–æ–∑–º–æ–∂–µ–Ω
–†–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–æ—Ç
üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞–º
–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π:
–°–æ–ª–æ (2 –≥–æ–ª–æ—Å–∞):
js


1
2
3
4
‚åÑ
new Tone.PolySynth(2, Tone.Synth, {
  oscillator: { type: 'triangle' },  // –ß–∏—Å—Ç—ã–π –∑–≤—É–∫
  envelope: { attack: 0.01, decay: 0.2, sustain: 0.5, release: 0.3 }
});
–ê–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç (3 –≥–æ–ª–æ—Å–∞):
js


1
2
3
4
‚åÑ
new Tone.PolySynth(3, Tone.Sampler, {
  urls: { C3: "piano_C3.mp3" },
  release: 0.4  // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ
});
–ë–∞—Å (1 –≥–æ–ª–æ—Å):
js


1
2
3
4
‚åÑ
new Tone.Synth({
  oscillator: { type: 'sine' },  // –ß–∏—Å—Ç—ã–π –±–∞—Å
  envelope: { attack: 0.01, decay: 0.1, sustain: 0.8, release: 0.2 }
});
–î–ª—è —Ä—É—á–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π:
–ú–µ–ª–æ–¥–∏—è (2 –≥–æ–ª–æ—Å–∞):
js


1
2
3
4
‚åÑ
new MonoSynthPool(2, Tone.Synth, {
  oscillator: { type: 'sawtooth' },  // –ë–æ–≥–∞—Ç—ã–π —Å–ø–µ–∫—Ç—Ä
  envelope: { attack: 0.01, decay: 0.1, sustain: 0.7, release: 0.3 }
});
–ë–∞—Å (2 –≥–æ–ª–æ—Å–∞):
js


1
2
3
4
‚åÑ
new MonoSynthPool(2, Tone.Synth, {
  oscillator: { type: 'sine' },  // –ß–∏—Å—Ç—ã–π –±–∞—Å
  envelope: { attack: 0.01, decay: 0.05, sustain: 0.9, release: 0.2 }
});
‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
1. –ü—Ä–æ—Å—Ç—ã–µ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã:
sine - –¥–ª—è –±–∞—Å–∞
triangle - –¥–ª—è —Å–æ–ª–æ
sawtooth - –¥–ª—è –º–µ–ª–æ–¥–∏–∏ (—Ç–æ–ª—å–∫–æ —Ä—É—á–Ω–∞—è)
2. –ö–æ—Ä–æ—Ç–∫–∏–µ –∞—Ç–∞–∫–∏:
attack: 0.01 –¥–ª—è –≤—Å–µ—Ö —Å–∏–Ω—Ç–æ–≤
3. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã:
–ù–∏–∫–∞–∫–∏—Ö reverb/delay –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
–¢–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
üß† –ò—Ç–æ–≥–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≥–æ–ª–æ—Å–æ–≤
–°–æ–ª–æ (–∞–≤—Ç–æ)
Poly
2
PolySynth
–ê–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç
Poly
3
PolySynth (Sampler)
–ë–∞—Å (–∞–≤—Ç–æ)
Mono
1
Synth
–ë–∞—Å (—Ä—É—á–Ω–æ–π)
Mono
2
MonoSynth Pool
–ú–µ–ª–æ–¥–∏—è (—Ä—É—á–Ω–∞—è)
Mono
2
MonoSynth Pool
–£–¥–∞—Ä–Ω—ã–µ
Mono
1
Sampler
–ò–¢–û–ì–û
-
11
–ì–∏–±—Ä–∏–¥
‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥:

PolySynth –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä—Ç–∏–π
MonoSynth Pool –¥–ª—è —Ä—É—á–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π
–≠—Ç–æ –¥–∞—Å—Ç –≤–∞–º:

–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ä—É—á–Ω—ã–º–∏ –ø–∞—Ä—Ç–∏—è–º–∏
–ß–∏—Å—Ç—ã–π –∑–≤—É–∫ –±–µ–∑ —Ö—Ä–∏–ø–æ–≤
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å Latch-—Ä–µ–∂–∏–º–∞
–•–æ—á–µ—à—å, —è –ø–æ–º–æ–≥—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø—É–ª–æ–≤ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤ –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã?

–†–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –Ω–µ –Ω–∞–¥–æ. –Ω–∞–¥–æ –¥–∞—Ç—å —á–µ—Ç–∫–∏–µ –ø–æ–Ω—è—á—Ç–Ω—ã–µ –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å

profile
Qwen3-Coder
11:54 am
üéØ –ß–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–æ–≤
üîß 1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä—Ç–∏–∏ (PolySynth)
–°–æ–ª–æ (2 –≥–æ–ª–æ—Å–∞):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
‚åÑ
‚åÑ
// –°–æ–∑–¥–∞–Ω–∏–µ
const soloSynth = new Tone.PolySynth(2, Tone.Synth, {
  oscillator: { type: 'triangle' },
  envelope: { 
    attack: 0.01, 
    decay: 0.2, 
    sustain: 0.5, 
    release: 0.3 
  }
}).toDestination();

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
soloSynth.triggerAttackRelease('C4', '8n');
–ê–∫–∫–æ–º–ø–∞–Ω–µ–º–µ–Ω—Ç (3 –≥–æ–ª–æ—Å–∞):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
‚åÑ
‚åÑ
// –°–æ–∑–¥–∞–Ω–∏–µ
const compSynth = new Tone.PolySynth(3, Tone.Sampler, {
  urls: {
    'C2': 'piano_C2.mp3',
    'C3': 'piano_C3.mp3', 
    'C4': 'piano_C4.mp3'
  },
  release: 0.4,
  baseUrl: '/samples/piano/'
}).toDestination();

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
compSynth.triggerAttackRelease(['C3', 'E3', 'G3'], '2n');
–ë–∞—Å (1 –≥–æ–ª–æ—Å):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
‚åÑ
‚åÑ
// –°–æ–∑–¥–∞–Ω–∏–µ
const bassSynth = new Tone.Synth({
  oscillator: { type: 'sine' },
  envelope: { 
    attack: 0.01, 
    decay: 0.1, 
    sustain: 0.8, 
    release: 0.2 
  }
}).toDestination();

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
bassSynth.triggerAttackRelease('C2', '1n');
üîß 2. –†—É—á–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ (MonoSynth Pool)
–°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
‚åÑ
class MonoSynthPool {
  constructor(size, SynthClass, options = {}) {
    this.synths = Array(size).fill(null).map(() => 
      new SynthClass(options).toDestination()
    );
    this.freeSynths = [...this.synths];
    this.activeNotes = new Map();
  }
  
  // –î–ª—è –æ–±—ã—á–Ω–æ–π –∏–≥—Ä—ã
  play(note, duration = '8n', time = Tone.now(), velocity = 1) {
    if (this.freeSynths.length === 0) return null;
    
    const synth = this.freeSynths.pop();
    synth.triggerAttackRelease(note, duration, time, velocity);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –ø—É–ª
    setTimeout(() => {
      this.freeSynths.push(synth);
    }, Tone.Time(duration).toMilliseconds() + 100);
    
    return synth;
  }
  
  // –î–ª—è Latch-—Ä–µ–∂–∏–º–∞
  hold(note, time = Tone.now(), velocity = 1) {
    if (this.freeSynths.length === 0) return null;
    
    const synth = this.freeSynths.pop();
    synth.triggerAttack(note, time, velocity);
    this.activeNotes.set(note, synth);
    return synth;
  }
  
  release(note) {
    const synth = this.activeNotes.get(note);
    if (synth) {
      synth.triggerRelease();
      synth.on('release', () => {
        this.freeSynths.push(synth);
        this.activeNotes.delete(note);
      });
    }
  }
}
–ú–µ–ª–æ–¥–∏—è (2 –≥–æ–ª–æ—Å–∞):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
‚åÑ
‚åÑ
// –°–æ–∑–¥–∞–Ω–∏–µ
const melodyPool = new MonoSynthPool(2, Tone.Synth, {
  oscillator: { type: 'sawtooth' },
  envelope: { 
    attack: 0.01, 
    decay: 0.1, 
    sustain: 0.7, 
    release: 0.3 
  }
});

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
melodyPool.play('C4', '8n'); // –û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞
–ë–∞—Å (2 –≥–æ–ª–æ—Å–∞) —Å Latch:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
‚åÑ
‚åÑ
// –°–æ–∑–¥–∞–Ω–∏–µ
const bassPool = new MonoSynthPool(2, Tone.Synth, {
  oscillator: { type: 'sine' },
  envelope: { 
    attack: 0.01, 
    decay: 0.05, 
    sustain: 0.9, 
    release: 0.2 
  }
});

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å Latch
bassPool.hold('C2');     // –ù–∞–∂–∞—Ç–∏–µ - –∑–≤—É–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
bassPool.release('C2');  // –û—Ç–ø—É—Å–∫–∞–Ω–∏–µ - –∑–≤—É–∫ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è
üéµ 3. –£–¥–∞—Ä–Ω—ã–µ (1 –≥–æ–ª–æ—Å):
js


1
2
3
4
5
6
7
8
9
10
11
12
13
‚åÑ
‚åÑ
// –°–æ–∑–¥–∞–Ω–∏–µ
const drumSampler = new Tone.Sampler({
  urls: {
    'C3': 'kick.mp3',
    'D3': 'snare.mp3',
    'E3': 'hat.mp3'
  },
  release: 0.1,
  baseUrl: '/samples/drums/'
}).toDestination();

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
drumSampler.triggerAttack('C3'); // Kick
‚öôÔ∏è 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
–î–ª—è —á–∏—Å—Ç–æ–≥–æ –∑–≤—É–∫–∞:
attack: 0.01 (–±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç)
release: 0.2-0.4 (–ø–ª–∞–≤–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ)
sustain: 0.5-0.9 (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä—Ç–∏–∏)
–¢–∏–ø—ã –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä–æ–≤:
sine: —á–∏—Å—Ç—ã–π –±–∞—Å
triangle: —á–∏—Å—Ç–æ–µ —Å–æ–ª–æ
sawtooth: –±–æ–≥–∞—Ç–æ–µ –∑–≤—É—á–∞–Ω–∏–µ –¥–ª—è –º–µ–ª–æ–¥–∏–∏
square: —è—Ä–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö)
üìä 5. –ö–æ–Ω—Ç—Ä–æ–ª—å –≥–æ–ª–æ—Å–æ–≤
–û–±—â–µ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ:
js


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
‚åÑ
‚åÑ
‚åÑ
// –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
let totalVoices = 0;
const MAX_VOICES = 10;

function canPlayVoice() {
  return totalVoices < MAX_VOICES;
}

// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–ª–æ—Å–∞
if (canPlayVoice()) {
  totalVoices++;
  // –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–Ω—Ç
}

// –ü—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≥–æ–ª–æ—Å–∞
synth.on('release', () => {
  totalVoices--;
});
üéØ 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
–®–∞–≥ 1: –°–æ–∑–¥–∞–π—Ç–µ –≤—Å–µ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
js


1
2
3
4
5
6
7
8
‚åÑ
const audioEngine = {
  solo: new Tone.PolySynth(2, Tone.Synth, { /* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */ }),
  comp: new Tone.PolySynth(3, Tone.Sampler, { /* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */ }),
  bass: new Tone.Synth({ /* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */ }),
  melodyPad: new MonoSynthPool(2, Tone.Synth, { /* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */ }),
  bassPad: new MonoSynthPool(2, Tone.Synth, { /* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */ }),
  drums: new Tone.Sampler({ /* –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */ })
};
–®–∞–≥ 2: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ: triggerAttackRelease()
–†—É—á–Ω—ã–µ: pool.play() –∏–ª–∏ pool.hold()
–£–¥–∞—Ä–Ω—ã–µ: triggerAttack()
–®–∞–≥ 3: –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
–ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
–ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –≤—Å–µ —Å—ç–º–ø–ª—ã
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç—ã–µ –æ—Å—Ü–∏–ª–ª—è—Ç–æ—Ä—ã
‚úÖ –ì–æ—Ç–æ–≤–æ! –ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
–ß–∏—Å—Ç—ã–π –∑–≤—É–∫ –±–µ–∑ —Ö—Ä–∏–ø–æ–≤
–°—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω–∞ —Å–ª–∞–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ä—É—á–Ω—ã–º–∏ –ø–∞—Ä—Ç–∏—è–º–∏
–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å Latch –¥–ª—è –±–∞—Å–∞
–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
–≠—Ç–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –≤–∞—à–µ–º –∫–æ–¥–µ!







