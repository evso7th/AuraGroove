
/**
 * @file AuraGroove Ambient Music Worker
 *
 * This worker operates on a microservice-style architecture.
 * It is the "Sound Engine", responsible for both composing and rendering audio.
 */
import type { DrumNote, SynthNote, WorkerCommand, WorkerSettings, DrumSampleName, InstrumentSettings, ScoreName } from '@/types/music';

// --- 1. PatternProvider (The Music Sheet Library) ---
const PatternProvider = {
    drumPatterns: {
        ambient_beat: [
            { sample: 'kick' as DrumSampleName, time: 0, velocity: 1.0 },
            { sample: 'hat' as DrumSampleName, time: 0.5, velocity: 0.3 },
            { sample: 'snare' as DrumSampleName, time: 1.0, velocity: 0.8 },
            { sample: 'hat' as DrumSampleName, time: 1.5, velocity: 0.3 },
            { sample: 'kick' as DrumSampleName, time: 2.0, velocity: 0.9 },
            { sample: 'hat' as DrumSampleName, time: 2.5, velocity: 0.3 },
            { sample: 'snare' as DrumSampleName, time: 3.0, velocity: 0.7 },
            { sample: 'hat' as DrumSampleName, time: 3.5, velocity: 0.3 },
        ],
        composer: [], // This will be dynamically generated by the EvolutionEngine
        none: []
    },
    getDrumPattern(name: string): DrumNote[] {
        return this.drumPatterns[name as keyof typeof this.drumPatterns] || [];
    },
};

// --- 2. Instrument Generators (The Composers) ---
class DrumGenerator {
    static createScore(patternName: string, barNumber: number, settings: { volume: number }): DrumNote[] {
        if (patternName === 'none') return [];
        const pattern = PatternProvider.getDrumPattern(patternName);
        let score = [...pattern];

        // Add a crash cymbal on the first beat of every 4th bar for ambient_beat
        if (patternName === 'ambient_beat' && barNumber % 4 === 0) {
            score = score.filter(note => note.time !== 0);
            score.push({ sample: 'crash', time: 0, velocity: 0.8 });
        }
        
        return score.map(note => ({...note, velocity: note.velocity * settings.volume}));
    }
}

class EvolutionEngine {
    private textureNotes: { note: string; part: 'solo' | 'accompaniment'; releaseTime: number }[] = [];
    private readonly MAX_TEXTURE_NOTES = 6; // 4 for accompaniment, 2 for solo
    private readonly TARGET_DENSITY = 3; // Try to keep 3 notes sounding at once

    generateDrumScore(bar: number, settings: {volume: number}): DrumNote[] {
         if (bar % 2 === 0) {
            return [
                { sample: 'kick', time: 0, velocity: 1.0 * settings.volume },
                { sample: 'hat', time: 1, velocity: 0.4 * settings.volume },
                { sample: 'snare', time: 2, velocity: 0.8 * settings.volume },
                { sample: 'hat', time: 3, velocity: 0.4 * settings.volume },
            ];
         }
         return [
                { sample: 'kick', time: 0, velocity: 1.0 * settings.volume },
                { sample: 'hat', time: 1.5, velocity: 0.3 * settings.volume },
                { sample: 'kick', time: 2, velocity: 0.9 * settings.volume },
                { sample: 'snare', time: 3, velocity: 0.7 * settings.volume },
         ]
    }
    
    generateTextureScores(bar: number, settings: WorkerSettings, barDuration: number): { soloScore: SynthNote[], accompanimentScore: SynthNote[] } {
        const soloSettings = settings.instrumentSettings?.solo;
        const accompanimentSettings = settings.instrumentSettings?.accompaniment;

        const soloScore: SynthNote[] = [];
        const accompanimentScore: SynthNote[] = [];
        const harmonyNotes = ['C4', 'E4', 'G4', 'B4', 'D5', 'F5']; // Expanded harmony
        
        const now = bar * barDuration;

        // 1. Clean up old notes
        this.textureNotes = this.textureNotes.filter(n => n.releaseTime > now);

        // 2. Generate new notes to maintain density
        let currentDensity = this.textureNotes.length;
        
        for (let i = 0; i < 4; i++) { // Check 4 times per bar (once per beat)
            if (currentDensity < this.TARGET_DENSITY && this.textureNotes.length < this.MAX_TEXTURE_NOTES) {
                
                const timeOffset = i * (barDuration / 4);
                const isSoloMoment = Math.random() < 0.25 && soloSettings?.name !== 'none';

                let newNote: SynthNote;
                
                if (isSoloMoment) {
                     newNote = {
                        note: harmonyNotes[Math.floor(Math.random() * harmonyNotes.length)],
                        duration: barDuration * 1.5,
                        time: i, // time in beats
                        velocity: (0.6 + Math.random() * 0.2) * (soloSettings?.volume ?? 0.8)
                    };
                    soloScore.push(newNote);
                    this.textureNotes.push({ note: newNote.note, part: 'solo', releaseTime: now + timeOffset + newNote.duration });

                } else if (accompanimentSettings?.name !== 'none') {
                    newNote = {
                        note: harmonyNotes[Math.floor(Math.random() * harmonyNotes.length)],
                        duration: barDuration * 2, // Longer notes for accompaniment
                        time: i, // time in beats
                        velocity: (0.4 + Math.random() * 0.2) * (accompanimentSettings?.volume ?? 0.7)
                    };
                    accompanimentScore.push(newNote);
                    this.textureNotes.push({ note: newNote.note, part: 'accompaniment', releaseTime: now + timeOffset + newNote.duration });
                }
                
                currentDensity++;
            }
        }
        
        return { soloScore, accompanimentScore };
    }
    
    generateBassScore(bar: number, settings: WorkerSettings): SynthNote[] {
        const instrumentName = settings.instrumentSettings?.bass?.name;
        if (instrumentName === 'none') {
            return [];
        }
        const volume = settings.instrumentSettings?.bass?.volume ?? 0.9;
        const note = bar % 4 < 2 ? 'C2' : 'G1'; // Simple I-V progression
        
        return [{
            note: note,
            duration: 4,
            time: 0,
            velocity: 1.0 * volume
        }];
    }
}

// Dummy classes for parts that are not yet fully implemented, to avoid breaking changes.
class OmegaScoreGenerator {
    generateScore(bar: number, settings: any) { return []; }
}
class PromenadeScoreGenerator {
     generateScore(bar: number, settings: any) { return []; }
}

// --- 3. Scheduler (The Conductor) ---
const Scheduler = {
    barCount: 0,
    
    settings: {
        bpm: 75,
        score: 'evolve' as ScoreName,
        drumSettings: { pattern: 'ambient_beat', volume: 0.7, enabled: true },
        instrumentSettings: { 
            solo: { name: "none", volume: 0.8 },
            accompaniment: { name: "synthesizer", volume: 0.7 },
            bass: { name: "bassGuitar", volume: 0.9 },
        },
    } as WorkerSettings,

    evolutionEngine: new EvolutionEngine(),
    omegaEngine: new OmegaScoreGenerator(),
    promenadeEngine: new PromenadeScoreGenerator(),


    // Calculated properties
    get beatsPerBar() { return 4; },
    get secondsPerBeat() { return 60 / this.settings.bpm; },
    get barDuration() { return this.beatsPerBar * this.secondsPerBeat; },

    init() {
      this.barCount = 0;
      self.postMessage({ type: 'started' });
    },
    
    updateSettings(newSettings: Partial<WorkerSettings>) {
        if (newSettings.drumSettings) this.settings.drumSettings = { ...this.settings.drumSettings, ...newSettings.drumSettings };
        if (newSettings.instrumentSettings) this.settings.instrumentSettings = { ...this.settings.instrumentSettings, ...newSettings.instrumentSettings };
        if (newSettings.bpm) this.settings.bpm = newSettings.bpm;
        if (newSettings.score) this.settings.score = newSettings.score;
    },

    tick() {
        let drumScore: DrumNote[] = [];
        let soloScore: SynthNote[] = [];
        let accompanimentScore: SynthNote[] = [];
        let bassScore: SynthNote[] = [];

        if (this.settings.drumSettings.enabled) {
             if (this.settings.drumSettings.pattern === 'composer') {
                drumScore = this.evolutionEngine.generateDrumScore(this.barCount, this.settings.drumSettings);
            } else {
                 drumScore = DrumGenerator.createScore(this.settings.drumSettings.pattern, this.barCount, this.settings.drumSettings);
            }
        }
        
        bassScore = this.evolutionEngine.generateBassScore(this.barCount, this.settings);
        
        // Generate texture scores together
        const textureScores = this.evolutionEngine.generateTextureScores(this.barCount, this.settings, this.barDuration);
        soloScore = textureScores.soloScore;
        accompanimentScore = textureScores.accompanimentScore;


        const messageData = {
            drumScore,
            soloScore,
            accompanimentScore,
            bassScore,
            barDuration: this.barDuration,
        };
        
        self.postMessage({ type: 'score', data: messageData });
        
        this.barCount++;
    }
};


// --- MessageBus (The entry point) ---
self.onmessage = async (event: MessageEvent<WorkerCommand>) => {
    const { command, data } = event.data;

    try {
        switch (command) {
            case 'init':
                Scheduler.init();
                break;
            case 'tick':
                 Scheduler.tick();
                 break;
            case 'update_settings':
                 Scheduler.updateSettings(data);
                break;
        }
    } catch (e) {
        self.postMessage({ type: 'error', error: e instanceof Error ? e.message : String(e) });
    }
};
