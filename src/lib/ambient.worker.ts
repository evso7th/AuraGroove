

/**
 * @file AuraGroove Ambient Music Worker
 *
 * This worker operates on a microservice-style architecture.
 * It is the "Sound Engine", responsible for both composing and rendering audio.
 */
import type { DrumNote, SynthNote, WorkerCommand, WorkerSettings, DrumSampleName, InstrumentSettings, ScoreName, AudioProfile, MelodyTechnique } from '@/types/music';

// --- 1. PatternProvider (The Music Sheet Library) ---
const PatternProvider = {
    drumPatterns: {
        ambient_beat: [
            { sample: 'kick' as DrumSampleName, time: 0, velocity: 1.0 },
            { sample: 'hat' as DrumSampleName, time: 1.0, velocity: 0.3 },
            { sample: 'snare' as DrumSampleName, time: 2.0, velocity: 0.8 },
            { sample: 'hat' as DrumSampleName, time: 3.0, velocity: 0.3 },
        ],
        composer: [], // This will be dynamically generated by the EvolutionEngine
        none: []
    },
    getDrumPattern(name: keyof typeof PatternProvider.drumPatterns): DrumNote[] {
        return this.drumPatterns[name] || [];
    },
};

// --- 2. Instrument Generators (The Composers) ---
class EvolutionEngine {
    private chordProgression: { root: string; notes: string[] }[];
    private lastMelodyNoteIndex: number = 0;
    
    private readonly MELODY_VOICE_COUNT = 2;
    private melodyVoiceReleaseTimes: number[] = new Array(this.MELODY_VOICE_COUNT).fill(0);
    private nextPhraseStartTime: number = 0;


    constructor() {
        this.chordProgression = [
            { root: 'C2', notes: ['C3', 'E3', 'G3'] },    // I (C Major)
            { root: 'A1', notes: ['A2', 'C3', 'E3'] },    // vi (A Minor)
            { root: 'F1', notes: ['F2', 'A2', 'C3'] },    // IV (F Major)
            { root: 'G1', notes: ['G2', 'B2', 'D3'] },    // V (G Major)
        ];
        this.reset();
    }
    
    public reset() {
        console.log('[WORKER] EvolutionEngine Reset.');
        this.lastMelodyNoteIndex = 0;
        this.melodyVoiceReleaseTimes.fill(0);
        this.nextPhraseStartTime = 0;
    }

    generateComposerDrumScore(bar: number, volume: number): DrumNote[] {
        const score: DrumNote[] = [];
        
        // Sparse kick on the 2nd beat
        score.push({ sample: 'kick', time: 1.0, velocity: 0.8 * volume });
        // Very light hats on off-beats
        score.push({ sample: 'hat', time: 0.5, velocity: 0.2 * volume });
        score.push({ sample: 'hat', time: 2.5, velocity: 0.2 * volume });

        return score;
    }


    // "Harmony Breath"
    generateBassScore(bar: number, settings: WorkerSettings): SynthNote[] {
        const instrumentName = settings.instrumentSettings?.bass?.name;
        if (instrumentName === 'none') return [];
        
        const volume = settings.instrumentSettings?.bass?.volume ?? 0.7;
        
        // Change chord every 2 bars
        if (bar % 2 !== 0) return [];
        
        const currentChord = this.chordProgression[Math.floor(bar / 2) % this.chordProgression.length];
        
        const score: SynthNote[] = [
            // One long, 8-beat note (2 measures)
            { note: currentChord.root, duration: 8.0, time: 0, velocity: volume },
        ];

        return score;
    }

    generateMelodyScore(bar: number, settings: WorkerSettings, currentBarTime: number): SynthNote[] {
        const melodySettings = settings.instrumentSettings?.melody;
        if (melodySettings?.name === 'none') return [];
    
        const volume = melodySettings?.volume ?? 0.9;
        const technique = melodySettings?.technique ?? 'arpeggio';
        const score: SynthNote[] = [];
    
        // If it's not time for the next phrase, return empty
        if (currentBarTime < this.nextPhraseStartTime) {
            return [];
        }
    
        const phraseLength = Math.floor(Math.random() * 3) + 2; // 2-4 notes
        const noteDurationInBeats = 1.0; 
        const phraseDurationInBeats = phraseLength * noteDurationInBeats;
    
        const currentChord = this.chordProgression[Math.floor(bar / 2) % this.chordProgression.length];
        const chordNotes = currentChord.notes;
    
        const releaseTimeInBeats = 2.0; // Corresponds to synth release
        const phraseDurationWithAir = phraseDurationInBeats + releaseTimeInBeats;
    
        // Check if both voices are free for the entire duration of the new phrase
        const isVoice0Free = this.melodyVoiceReleaseTimes[0] <= currentBarTime;
        const isVoice1Free = this.melodyVoiceReleaseTimes[1] <= currentBarTime;
    
        if (!isVoice0Free || !isVoice1Free) {
            // A voice is still busy, wait for the next bar
            return [];
        }
    
        const phraseNotes: string[] = [];
        for (let i = 0; i < phraseLength; i++) {
            phraseNotes.push(chordNotes[(this.lastMelodyNoteIndex + i) % chordNotes.length]);
        }
    
        if (technique === 'arpeggio') {
            for (let i = 0; i < phraseLength; i++) {
                const voiceIndex = i % this.MELODY_VOICE_COUNT;
                const noteTime = i * noteDurationInBeats;
    
                score.push({
                    note: phraseNotes[i],
                    duration: noteDurationInBeats * 1.5, // Overlap for legato
                    time: noteTime,
                    velocity: volume,
                    voiceIndex: voiceIndex
                });
            }
        } else { // Portamento / Glissando
            score.push({
                note: phraseNotes,
                duration: phraseDurationInBeats,
                time: 0,
                velocity: volume,
                voiceIndex: 0 // Use the first voice for the whole phrase
            });
        }
    
        // Book the voices and schedule the next phrase
        const phraseEndTime = currentBarTime + (phraseDurationWithAir * (60 / settings.bpm));
        this.melodyVoiceReleaseTimes.fill(phraseEndTime);
        this.nextPhraseStartTime = phraseEndTime;
    
        this.lastMelodyNoteIndex = (this.lastMelodyNoteIndex + phraseLength) % chordNotes.length;
    
        return score;
    }
}


// Dummy classes for parts that are not yet fully implemented, to avoid breaking changes.
class OmegaScoreGenerator {
    generateScore(bar: number, settings: any) { return { bassScore: [], melodyScore: [] }; }
}
class PromenadeScoreGenerator {
     generateScore(bar: number, settings: any) { return { bassScore: [], melodyScore: [] }; }
}

// --- 3. Scheduler (The Conductor) ---
const Scheduler = {
    barCount: 0,
    
    settings: {
        bpm: 75,
        score: 'evolve' as ScoreName,
        drumSettings: { pattern: 'ambient_beat', volume: 0.5, enabled: true },
        instrumentSettings: { 
            bass: { name: "portamento", volume: 0.45 },
            melody: { name: "synth", volume: 0.45, technique: 'arpeggio' as MelodyTechnique },
        },
    } as WorkerSettings,

    evolutionEngine: new EvolutionEngine(),
    omegaEngine: new OmegaScoreGenerator(),
    promenadeEngine: new PromenadeScoreGenerator(),


    // Calculated properties
    get beatsPerBar() { return 4; },
    get secondsPerBeat() { return 60 / this.settings.bpm; },
    get barDuration() { return this.beatsPerBar * this.secondsPerBeat; },

    reset() {
      this.barCount = 0;
      this.evolutionEngine.reset();
      self.postMessage({ type: 'started' });
    },
    
    updateSettings(newSettings: Partial<WorkerSettings>) {
        if (newSettings.drumSettings) this.settings.drumSettings = { ...this.settings.drumSettings, ...newSettings.drumSettings };
        if (newSettings.instrumentSettings) this.settings.instrumentSettings = { ...this.settings.instrumentSettings, ...newSettings.instrumentSettings };
        if (newSettings.bpm) this.settings.bpm = newSettings.bpm;
        if (newSettings.score) this.settings.score = newSettings.score;
    },

    // This is now only called when the main thread commands it.
    tick() {
        console.log(`[WORKER] Scheduler.tick called for bar ${this.barCount}`);
        let drumScore: DrumNote[] = [];
        let bassScore: SynthNote[] = [];
        let melodyScore: SynthNote[] = [];
        const currentBarTime = this.barCount * this.barDuration;

        if (this.settings.drumSettings.enabled) {
            const pattern = this.settings.drumSettings.pattern;
            if (pattern === 'composer') {
                drumScore = this.evolutionEngine.generateComposerDrumScore(this.barCount, this.settings.drumSettings.volume);
            } else if (pattern === 'ambient_beat') {
                const staticPattern = PatternProvider.getDrumPattern('ambient_beat');
                drumScore = staticPattern.map(note => ({ ...note, velocity: note.velocity * this.settings.drumSettings.volume }));
            }
        }
        
        bassScore = this.evolutionEngine.generateBassScore(this.barCount, this.settings);
        melodyScore = this.evolutionEngine.generateMelodyScore(this.barCount, this.settings, currentBarTime);
       
        const messageData = {
            drumScore,
            bassScore,
            melodyScore,
            barDuration: this.barDuration,
        };
        
        console.log(`[WORKER] Posting score to main thread:`, messageData);
        self.postMessage({ type: 'score', data: messageData });
        
        this.barCount++;
    }
};


// --- MessageBus (The entry point) ---
self.onmessage = async (event: MessageEvent<WorkerCommand>) => {
    const { command, data } = event.data;
    console.log('[WORKER] Received command:', command, data);

    try {
        switch (command) {
            case 'init':
                Scheduler.reset();
                break;
            case 'tick':
                 Scheduler.tick();
                 break;
            case 'update_settings':
                 Scheduler.updateSettings(data);
                break;
            case 'reset':
                 Scheduler.reset();
                 break;
        }
    } catch (e) {
        self.postMessage({ type: 'error', error: e instanceof Error ? e.message : String(e) });
    }
};

    