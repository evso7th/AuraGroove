
/**
 * @file AuraGroove Ambient Music Worker
 *
 * This worker operates on a microservice-style architecture.
 * It is the "Sound Engine", responsible for both composing and rendering audio.
 */
import type { DrumNote, SynthNote, WorkerCommand, WorkerSettings, DrumSampleName, InstrumentSettings, ScoreName, AudioProfile } from '@/types/music';

// --- 1. PatternProvider (The Music Sheet Library) ---
const PatternProvider = {
    drumPatterns: {
        ambient_beat: [
            { sample: 'kick' as DrumSampleName, time: 0, velocity: 1.0 },
            { sample: 'hat' as DrumSampleName, time: 0.5, velocity: 0.3 },
            { sample: 'snare' as DrumSampleName, time: 1.0, velocity: 0.8 },
            { sample: 'hat' as DrumSampleName, time: 1.5, velocity: 0.3 },
            { sample: 'kick' as DrumSampleName, time: 2.0, velocity: 0.9 },
            { sample: 'hat' as DrumSampleName, time: 2.5, velocity: 0.3 },
            { sample: 'snare' as DrumSampleName, time: 3.0, velocity: 0.7 },
            { sample: 'hat' as DrumSampleName, time: 3.5, velocity: 0.3 },
        ],
        composer: [], // This will be dynamically generated by the EvolutionEngine
        none: []
    },
    getDrumPattern(name: string): DrumNote[] {
        return this.drumPatterns[name as keyof typeof this.drumPatterns] || [];
    },
};

// --- 2. Instrument Generators (The Composers) ---
class EvolutionEngine {
    private nextFillBar: number;
    private currentFillInterval: number;

    private bassPhraseLength: number;
    private maxBassPhraseLength: number;

    constructor() {
        this.reset();
    }
    
    private getNewMaxBassPhraseLength(): number {
        return Math.floor(Math.random() * (5 - 2 + 1)) + 2; // Random length from 2 to 4 bars
    }
    
    public reset() {
        this.currentFillInterval = Math.floor(Math.random() * (12 - 6 + 1)) + 6;
        this.nextFillBar = this.currentFillInterval - 1;

        this.bassPhraseLength = 0;
        this.maxBassPhraseLength = this.getNewMaxBassPhraseLength();
    }

    generateDrumScore(bar: number, settings: {volume: number}): DrumNote[] {
        const score: DrumNote[] = [];
        const vol = settings.volume;

        score.push({ sample: 'kick', time: 0, velocity: 1.0 * vol });
        score.push({ sample: 'hat', time: 1, velocity: 0.4 * vol });
        score.push({ sample: 'snare', time: 2, velocity: 0.8 * vol });
        score.push({ sample: 'hat', time: 3, velocity: 0.4 * vol });

        // Add fills
        if (bar === this.nextFillBar) {
             score.push({ sample: 'kick', time: 1, velocity: 0.7 * vol });
             score[2] = { sample: 'crash', time: 3, velocity: 0.6 * vol };
             this.currentFillInterval = Math.floor(Math.random() * (12 - 6 + 1)) + 6;
             this.nextFillBar += this.currentFillInterval;
        }

        return score;
    }

    generateBassScore(bar: number, settings: WorkerSettings): SynthNote[] {
        const instrumentName = settings.instrumentSettings?.bass?.name;
        if (instrumentName === 'none') {
            return [];
        }

        if (this.bassPhraseLength >= this.maxBassPhraseLength) {
            this.bassPhraseLength = 0;
            this.maxBassPhraseLength = this.getNewMaxBassPhraseLength();
            return [];
        }

        this.bassPhraseLength++;
        const volume = settings.instrumentSettings?.bass?.volume ?? 0.9;
        const note = bar % 4 < 2 ? 'C2' : 'A1'; 
        
        const score: SynthNote[] = [{
            note: note,
            duration: 4,
            time: 0,
            velocity: 0.9 * volume
        }];
        return score;
    }

    generateMelodyScore(bar: number, settings: WorkerSettings): SynthNote[] {
        const instrumentName = settings.instrumentSettings?.melody?.name;
        if (instrumentName === 'none') {
            return [];
        }

        const volume = settings.instrumentSettings?.melody?.volume ?? 0.9;
        // Play one octave higher than bass
        const note = bar % 4 < 2 ? 'C3' : 'A2'; 
        
        const score: SynthNote[] = [{
            note: note,
            duration: 4,
            time: 0,
            velocity: 0.9 * volume
        }];
        return score;
    }
}

// Dummy classes for parts that are not yet fully implemented, to avoid breaking changes.
class OmegaScoreGenerator {
    generateScore(bar: number, settings: any) { return { bassScore: [], melodyScore: [] }; }
}
class PromenadeScoreGenerator {
     generateScore(bar: number, settings: any) { return { bassScore: [], melodyScore: [] }; }
}

// --- 3. Scheduler (The Conductor) ---
const Scheduler = {
    barCount: 0,
    
    settings: {
        bpm: 75,
        score: 'evolve' as ScoreName,
        drumSettings: { pattern: 'ambient_beat', volume: 0.5, enabled: true },
        instrumentSettings: { 
            bass: { name: "portamento", volume: 0.45 },
            melody: { name: "portamento", volume: 0.45 },
        },
    } as WorkerSettings,

    evolutionEngine: new EvolutionEngine(),
    omegaEngine: new OmegaScoreGenerator(),
    promenadeEngine: new PromenadeScoreGenerator(),


    // Calculated properties
    get beatsPerBar() { return 4; },
    get secondsPerBeat() { return 60 / this.settings.bpm; },
    get barDuration() { return this.beatsPerBar * this.secondsPerBeat; },

    reset() {
      this.barCount = 0;
      this.evolutionEngine.reset();
      self.postMessage({ type: 'started' });
    },
    
    updateSettings(newSettings: Partial<WorkerSettings>) {
        if (newSettings.drumSettings) this.settings.drumSettings = { ...this.settings.drumSettings, ...newSettings.drumSettings };
        if (newSettings.instrumentSettings) this.settings.instrumentSettings = { ...this.settings.instrumentSettings, ...newSettings.instrumentSettings };
        if (newSettings.bpm) this.settings.bpm = newSettings.bpm;
        if (newSettings.score) this.settings.score = newSettings.score;
    },

    // This is now only called when the main thread commands it.
    tick() {
        let drumScore: DrumNote[] = [];
        let bassScore: SynthNote[] = [];
        let melodyScore: SynthNote[] = [];

        if (this.settings.drumSettings.enabled) {
            if (this.settings.drumSettings.pattern === 'composer') {
               drumScore = this.evolutionEngine.generateDrumScore(this.barCount, this.settings.drumSettings);
           } else {
                drumScore = PatternProvider.getDrumPattern(this.settings.drumSettings.pattern);
           }
        }
        
        bassScore = this.evolutionEngine.generateBassScore(this.barCount, this.settings);
        melodyScore = this.evolutionEngine.generateMelodyScore(this.barCount, this.settings);
       
        const messageData = {
            drumScore,
            bassScore,
            melodyScore,
            barDuration: this.barDuration,
        };
        
        self.postMessage({ type: 'score', data: messageData });
        
        this.barCount++;
    }
};


// --- MessageBus (The entry point) ---
self.onmessage = async (event: MessageEvent<WorkerCommand>) => {
    const { command, data } = event.data;

    try {
        switch (command) {
            case 'init':
                Scheduler.reset();
                break;
            case 'tick':
                 Scheduler.tick();
                 break;
            case 'update_settings':
                 Scheduler.updateSettings(data);
                break;
            case 'reset':
                 Scheduler.reset();
                 break;
        }
    } catch (e) {
        self.postMessage({ type: 'error', error: e instanceof Error ? e.message : String(e) });
    }
};
