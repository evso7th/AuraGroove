
// A unique identifier for a drum sample.
export type DrumSampleName = 'kick' | 'snare' | 'hat' | 'crash' | 'ride' | 'cymbal_bell1' | 'closed_hi_hat_accented';

// Represents a single drum hit in a score.
export type DrumNote = {
    sample: DrumSampleName; // Which drum sound to play.
    time: number;          // When to play it, in beats, relative to the bar start.
    velocity: number;      // How hard to hit it (0-1).
};


// Represents a single synthesizer note in a score.
export type SynthNote = {
    note: string | string[]; // A single note ('C4') or a chord (['C4', 'E4', 'G4']).
    duration: number | string; // How long the note should last (in Tone.js Time format, e.g., '8n', 0.5).
    time: number;          // When to play it, in beats, relative to the bar start.
    velocity: number;      // How loud to play it (0-1).
};

// A complete musical score for one bar, generated by the Composer worker.
export type Score = {
    bassScore: SynthNote[];
    drumScore: DrumNote[];
    melodyScore: SynthNote[];
};

// --- UI Types ---
// Bass instrument names are now managed inside the worker. 'none' is for UI state.
export type BassInstrument = 'portamento' | 'bassGuitar' | 'BassGroove' | 'none';

export type InstrumentSettings = {
  bass: {
      name: BassInstrument;
      volume: number; // 0-1
  };
};

export type DrumSettings = {
    pattern: 'ambient_beat' | 'composer' | 'none';
    volume: number;
};

export type EffectsSettings = {
    enabled: boolean;
};

export type ScoreName = 'evolve' | 'omega' | 'promenade';

// Settings sent from the UI to the main engine/worker.
export type WorkerSettings = {
    bpm: number;
    score: ScoreName;
    drumSettings: Omit<DrumSettings, 'volume'> & { enabled: boolean };
    instrumentSettings: InstrumentSettings;
};
