
// --- This file defines the data structures for our music application ---

// A unique identifier for a drum sample.
export type DrumSampleName = 'kick' | 'snare' | 'hat' | 'crash' | 'ride' | 'cymbal_bell1' | 'closed_hi_hat_accented';

// Represents a single drum hit in a score.
export type DrumNote = {
    sample: DrumSampleName; // Which drum sound to play.
    time: number;          // When to play it, in beats, relative to the bar start.
    velocity: number;      // How hard to hit it (0-1).
};


// Represents a single synthesizer note in a score.
export type SynthNote = {
    note: string | string[]; // A single note ('C4') or a chord (['C4', 'E4', 'G4']).
    duration: number | string; // How long the note should last (in Tone.js Time format, e.g., '8n', 0.5).
    time: number;          // When to play it, in beats, relative to the bar start.
    velocity: number;      // How loud to play it (0-1).
};

// A complete musical score for one bar, generated by the Composer worker.
export type Score = {
    bassScore: SynthNote[];
    drumScore: DrumNote[];
    melodyScore: SynthNote[];
};

// --- Types for Main Thread <-> Iframe (Performer) Communication ---

// Commands sent FROM the main thread TO the rhythm iframe.
export type RhythmFrameCommand = {
    command: 'init' | 'start' | 'stop' | 'schedule' | 'set_param';
    payload?: any; // Can be a score, settings, etc.
}

// Messages sent FROM an iframe TO the main thread.
export type FrameMessage = {
    type: 'rhythm_frame_ready' | 'melody_frame_ready' | 'error';
    frame: 'rhythm' | 'melody';
    error?: string;
}

// Commands sent FROM the main thread TO the melody iframe.
export type MelodyFrameCommand = {
    command: 'init' | 'start' | 'stop' | 'schedule' | 'set_param';
    payload?: any; 
};

// Messages sent FROM the melody iframe TO the main thread.
export type MelodyFrameMessage = {
    type: 'melody_frame_ready' | 'error';
    frame: 'melody';
    error?: string;
}


// --- UI Types ---
export type BassInstrument = 'bassGuitar' | 'BassGroove' | 'portamento' | 'portamentoMob' | 'BassGrooveMob' | 'none';
export type MelodyInstrument = 'synth' | 'none';
export type MelodyTechnique = 'arpeggio' | 'portamento' | 'glissando';


export type InstrumentSettings = {
  bass: {
      name: BassInstrument;
      volume: number; // 0-1
  };
  melody: {
      name: MelodyInstrument;
      volume: number; // 0-1
      technique: MelodyTechnique;
  };
};

export type DrumSettings = {
    pattern: 'ambient_beat' | 'composer' | 'none';
    volume: number;
};

export type EffectsSettings = {
    enabled: boolean;
};

export type ScoreName = 'evolve' | 'omega' | 'promenade';

// Settings sent from the UI to the main engine/worker.
export type WorkerSettings = {
    bpm: number;
    score: ScoreName;
    drumSettings: Omit<DrumSettings, 'volume'> & { enabled: boolean };
    instrumentSettings: InstrumentSettings;
};
